shiny::fluidRow(column(
4,
shiny::dateInput(
ns("startDate"),
"Start Date",
format = "yyyy-mm-dd",
startview = "year"
)
),
column(
4,
shiny::dateInput(
ns("endDate"),
"End Date",
format = "yyyy-mm-dd",
startview = "year"
)
)),
htmltools::h4("Location Information"),
shiny::fluidRow(
column(4, shiny::selectizeInput(ns("state"), "State", choices = NULL)),
column(
4,
shiny::selectizeInput(ns("county"), "County (pick state first)", choices = NULL)
),
column(
4,
shiny::textInput(ns("huc"), "Hydrologic Unit", placeholder = "e.g. 020700100103")
)
),
shiny::fluidRow(
column(4, shiny::selectizeInput(ns("siteid"),"Monitoring Location ID(s)",choices = NULL,multiple = TRUE)),
column(4, shiny::selectizeInput(ns("countryocean"),"Country/Ocean(s)", choices = NULL,multiple = TRUE))
),
htmltools::h4("Metadata Filters"),
shiny::fluidRow(
column(
4,
shiny::selectizeInput(
ns("org"),
"Organization(s)",
choices = NULL,
multiple = TRUE
)
),
column(
4,
shiny::selectizeInput(
ns("project"),
"Project(s)",
choices = NULL,
multiple = TRUE
)
),
column(
4,
shiny::selectizeInput(
ns("type"),
"Site Type(s)",
choices = c(sitetype),
multiple = TRUE
)
)
),
shiny::fluidRow(
column(
4,
shiny::selectizeInput(
ns("media"),
tags$span(
"Sample Media",
tags$i(
class = "glyphicon glyphicon-info-sign",
style = "color:#0072B2;",
title = "TADA is designed to work with water data"
)
),
choices = c("", media),
selected = c("Water", "water"),
multiple = TRUE
)
),
column(
4,
shiny::selectizeInput(ns("chargroup"), "Characteristic Group", choices = NULL)
),
column(
4,
shiny::selectizeInput(
ns("characteristic"),
"Characteristic(s)",
choices = NULL,
multiple = TRUE
)
)
),
shiny::fluidRow(column(
4,
shiny::actionButton(ns("querynow"), "Run Query", shiny::icon("cloud"),
style = "color: #fff; background-color: #337ab7; border-color: #2e6da4")
)),
htmltools::hr(),
shiny::fluidRow(
htmltools::h3("Option C: Upload dataset"),
htmltools::HTML((
"Upload a dataset from your computer. This upload feature only accepts data in .xls and .xlsx formats.
The file can be a <B>fresh</B> TADA dataset or a <B>working</B> TADA dataset that you are returning to the
app to iterate on. Data must also be formatted in the EPA Water Quality eXchange (WQX) schema to leverage
this tool. You may reach out to the WQX helpdesk at WQX@epa.gov for assistance preparing and submitting your data
to the WQP through EPA's WQX."
)
),
# widget to upload WQP profile or WQX formatted spreadsheet
column(
9,
shiny::fileInput(
ns("file"),
"",
multiple = TRUE,
accept = c(".xlsx", ".xls"),
width = "100%"
)
)
),
htmltools::hr(),
shiny::fluidRow(
htmltools::h3("Optional: Upload Progress File"),
htmltools::HTML((
"Upload a progress file from your computer. This upload feature only accepts data in the .RData format.
The TADA Shiny application keeps track of all user selections, and makes a .RData file
available for download at any time. If you saved a progress file you generated during a
previous use of the TADA Shiny application, then it can be uploaded here and used
to automatically parameterize the TADA Shiny app with the same selections. This file can
be used to regenerate a dataset with the same decisions as before, or can be used
to apply the same user selctions to a new dataset"
)
),
# widget to upload WQP profile or WQX formatted spreadsheet
column(
9,
shiny::fileInput(
ns("progress_file"),
"",
multiple = TRUE,
accept = c(".RData"),
width = "100%"
)
)
),
)
}
TADAShiny::run_app()
debugSource("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
library(tidyjson)
library(jsonlite)
library(dplyr)
url <- 'https://www.waterqualitydata.us/Codes/countrycode?mimeType=json'
countryoceanssource <- fromJSON(txt=url)
countryoceans <- countryoceanssource$codes %>% select(-one_of('providers'))
countryoceans <- countryoceans[order(countryoceans$desc),]
choices <- countryoceans$value
descriptions <- countryoceans$desc
names(choices) <- descriptions
names
library(tidyjson)
library(jsonlite)
library(dplyr)
url <- 'https://www.waterqualitydata.us/Codes/countrycode?mimeType=json'
countryoceanssource <- fromJSON(txt=url)
countryoceans <- countryoceanssource$codes %>% select(-one_of('providers'))
countryoceans <- countryoceans[order(countryoceans$desc),]
choices <- countryoceans$value
descriptions <- countryoceans$desc
names(choices) <- descriptions
choices
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
library(tidyjson)
library(jsonlite)
library(dplyr)
url <- 'https://www.waterqualitydata.us/Codes/countrycode?mimeType=json'
countryoceanssource <- fromJSON(txt=url)
countryoceans <- countryoceanssource$codes %>% select(-one_of('providers'))
countryoceans <- countryoceans[order(countryoceans$desc),]
choices <- countryoceans$value
descriptions <- countryoceans$desc
names(choices) <- descriptions
choices
library(tidyjson)
library(jsonlite)
library(dplyr)
url <- 'https://www.waterqualitydata.us/Codes/countrycode?mimeType=json'
countryoceanssource <- fromJSON(txt=url)
countryoceans <- countryoceanssource$codes %>% select(-one_of('providers'))
# countryoceans <- countryoceans[order(countryoceans$desc),]
choices <- countryoceans$value
descriptions <- countryoceans$desc
names(choices) <- descriptions
choices
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
TADAShiny::run_app()
debugSource("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
TADAShiny::run_app()
TADAShiny::run_app()
TADAShiny::run_app()
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
debugSource("C:/Data_and_Tools/tada/testing.r")
TADAShiny::run_app()
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
TADAShiny::run_app()
TADAShiny::run_app()
getwd()
library(devtools)
load_all()
10.	options(shiny.launch.browser = .rs.invokeShinyWindowExternal)
options(shiny.launch.browser = .rs.invokeShinyWindowExternal)
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
getwd()
library(devtools) #at start
load_all() #at start
TADAShiny::run_app()
options(shiny.launch.browser = .rs.invokeShinyWindowExternal)
TADAShiny::run_app()
TADAShiny::run_app()
TADAShiny::run_app()
TADAShiny::run_app()
library(devtools) #at start
load_all() #at start
options(shiny.launch.browser = .rs.invokeShinyWindowExternal) # run this before starting the app to run in default browswer
TADAShiny::run_app() # actually run the app and display in built-in browser
TADAShiny::run_app() # actually run the app and display in built-in browser
library(devtools)
load_all()
options(shiny.launch.browser = .rs.invokeShinyWindowExternal)
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
TADAShiny::run_app()
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
library(devtools)
load_all()
options(shiny.launch.browser = .rs.invokeShinyWindowExternal)
TADAShiny::run_app()
TADAShiny::run_app()
TADAShiny::run_app()
library(devtools)
load_all()
TADAShiny::run_app()
options(shiny.launch.browser = .rs.invokeShinyWindowExternal)
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
library(devtools); load_all(); options(shiny.launch.browser = .rs.invokeShinyWindowExternal);
TADAShiny::run_app()
library(devtools); load_all(); options(shiny.launch.browser = .rs.invokeShinyWindowExternal);
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
library(devtools)
load_all()
options(shiny.launch.browser = .rs.invokeShinyWindowExternal)
runApp()
TADAShiny::run_app()
run_app()
R/run_app()
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function( FOOBAR
onStart = NULL,
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
source("C:/Data_and_Tools/tada/TADAShiny/R/run_app.R")
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/run_app.R")
source("C:/Data_and_Tools/tada/TADAShiny/R/run_app.R")
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
run_app()
TADAShiny::run_app()
library(devtools)
shiny::runApp()
library(devtools); load_all(); options(shiny.launch.browser = .rs.invokeShinyWindowExternal);
library(devtools); load_all(); options(shiny.launch.browser = .rs.invokeShinyWindowExternal);
library(devtools); load_all(); options(shiny.launch.browser = .rs.invokeShinyWindowExternal);
rm(list = c("run_app"))
library(devtools); load_all(); options(shiny.launch.browser = .rs.invokeShinyWindowExternal);
TADAShiny::run_app()
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
library(devtools); load_all(); options(shiny.launch.browser = .rs.invokeShinyWindowExternal);
TADAShiny::run_app()
run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
run_app()
library(devtools); load_all(); options(shiny.launch.browser = .rs.invokeShinyWindowExternal);
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
TADAShiny::run_app()
run_app()
library(devtools); load_all(); options(shiny.launch.browser = .rs.invokeShinyWindowExternal);
run_app()
run_app()
document()
run_app()
document()
run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
document()
TADAShiny::run_app()
source("C:/Data_and_Tools/tada/TADAShiny/R/mod_query_data.R")
document()
TADAShiny::run_app()
TADAShiny::run_app()
runApp()
runApp()
runApp()
runApp()
?loadSupport
loadSupport()
runApp()
